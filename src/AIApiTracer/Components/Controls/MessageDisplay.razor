@using AIApiTracer.Services.MessageParsing
@using System.Text.Json

<div class="message-display">
    @if (ParsedData != null && ParsedData.Messages.Any())
    {
        <div class="space-y-2">
            @foreach (var message in ParsedData.Messages)
            {
                @if (message.Role == "tool")
                {
                    <ToolResultDisplay 
                        ToolCallId="@(message.OtherData?.TryGetValue("tool_call_id", out var toolCallIdEl) == true ? toolCallIdEl.GetString() : null)"
                        TextResult="@message.Content"
                        IsError="false" />
                }
                else
                {
                    <div class="border border-gray-200 rounded-lg p-3 bg-gray-50">
                        <div class="flex items-center gap-2 mb-1">
                            <span class="text-xs font-medium px-2 py-1 rounded @GetRoleClass(message.Role)">
                                @message.Role
                            </span>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(message.Content))
                        {
                            <div class="text-sm text-gray-800 whitespace-pre-wrap">@message.Content</div>
                        }
                    else if (message.ContentParts != null)
                    {
                        <div class="space-y-2">
                            @foreach (var part in message.ContentParts)
                            {
                                @if (part.Type == "text" && !string.IsNullOrEmpty(part.Text))
                                {
                                    <div class="text-sm text-gray-800 whitespace-pre-wrap">@part.Text</div>
                                }
                                else if (part.Type == "image" && !string.IsNullOrEmpty(part.ImageUrl))
                                {
                                    <div class="flex items-center gap-2 text-sm text-gray-600">
                                        <i class="icon-ic_fluent_image_20_regular"></i>
                                        <span>Image content</span>
                                    </div>
                                }
                                else if (part.Type == "tool_use" && part.OtherData != null)
                                {
                                    <ToolCallDisplay 
                                        Name="@(part.OtherData.TryGetValue("name", out var nameEl) ? nameEl.GetString() ?? "unknown" : "unknown")"
                                        Id="@(part.OtherData.TryGetValue("id", out var idEl) ? idEl.GetString() ?? "" : "")"
                                        Arguments="@(part.OtherData.TryGetValue("input", out var inputEl) ? inputEl : null)"
                                        Result="@null" />
                                }
                                else if (part.Type == "tool_result")
                                {
                                    <ToolResultDisplay 
                                        ToolCallId="@(part.OtherData?.TryGetValue("tool_use_id", out var toolUseIdEl) == true ? toolUseIdEl.GetString() : null)"
                                        TextResult="@part.Text"
                                        JsonResult="@(part.OtherData?.TryGetValue("content", out var contentEl) == true && string.IsNullOrEmpty(part.Text) ? contentEl : null)"
                                        IsError="@(part.OtherData?.TryGetValue("is_error", out var isErrorEl) == true && isErrorEl.GetBoolean())" />
                                }
                                else
                                {
                                    <div class="text-sm text-gray-600">[@part.Type content]</div>
                                }
                            }
                        </div>
                    }
                    
                    @* Display tool calls associated with this message *@
                    @if (message.ToolCalls != null && message.ToolCalls.Any())
                    {
                        <div class="mt-3 space-y-2">
                            @foreach (var toolCall in message.ToolCalls)
                            {
                                <ToolCallDisplay 
                                    Name="@toolCall.Name"
                                    Id="@toolCall.Id"
                                    Arguments="@toolCall.Arguments"
                                    Result="@toolCall.Result" />
                            }
                        </div>
                    }
                    </div>
                }
            }
        </div>
        
        @* Display any tool calls not associated with a message (for backward compatibility) *@
        @if (ParsedData.ToolCalls.Any(tc => !ParsedData.Messages.Any(m => m.ToolCalls?.Contains(tc) == true)))
        {
            <div class="mt-3 space-y-2">
                @foreach (var toolCall in ParsedData.ToolCalls.Where(tc => !ParsedData.Messages.Any(m => m.ToolCalls?.Contains(tc) == true)))
                {
                    <ToolCallDisplay 
                        Name="@toolCall.Name"
                        Id="@toolCall.Id"
                        Arguments="@toolCall.Arguments"
                        Result="@toolCall.Result" />
                }
            </div>
        }
    }
    else
    {
        <div class="text-sm text-gray-500">No messages found</div>
    }
</div>

@code {
    [Parameter] public ParsedMessageData? ParsedData { get; set; }
    
    private string GetRoleClass(string role)
    {
        return role.ToLower() switch
        {
            "system" => "bg-purple-100 text-purple-800",
            "user" => "bg-blue-100 text-blue-800",
            "assistant" => "bg-green-100 text-green-800",
            "tool" => "bg-orange-100 text-orange-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
    
}